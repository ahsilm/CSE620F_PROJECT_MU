
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 38958,
            "commit_sha": "8e5dada5b15a7605c856a05005cc3206cd4a72e3",
            "commit_message": "Examples: improve spinner buttons accessibility (#38958)",
            "code_changes": "-    <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-    <span class=\"visually-hidden\">Loading...</span>\n+    <span class=\"spinner-border spinner-border-sm\" aria-hidden=\"true\"></span>\n+    <span class=\"visually-hidden\" role=\"status\">Loading...</span>\n-    <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-    Loading...\n+    <span class=\"spinner-border spinner-border-sm\" aria-hidden=\"true\"></span>\n+    <span role=\"status\">Loading...</span>"
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 38632,
            "commit_sha": "a4918e33b80684386fce1ec64fc0204e0bac6b90",
            "commit_message": "docs(spinners): improve buttons examples accessibility (#38632)\n\n* docs(spinners): improve buttons examples accessibility\r\n\r\n* docs(spinners): missed occurrence of wrong role + aria-hidden\r\n\r\n---------\r\n\r\nCo-authored-by: Patrick H. Lauke <redux@splintered.co.uk>",
            "code_changes": "-  <strong>Loading...</strong>\n-  <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\n+  <strong role=\"status\">Loading...</strong>\n+  <div class=\"spinner-border ms-auto\" aria-hidden=\"true\"></div>\n-  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  <span class=\"visually-hidden\">Loading...</span>\n+  <span class=\"spinner-border spinner-border-sm\" aria-hidden=\"true\"></span>\n+  <span class=\"visually-hidden\" role=\"status\">Loading...</span>\n-  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  Loading...\n+  <span class=\"spinner-border spinner-border-sm\" aria-hidden=\"true\"></span>\n+  <span role=\"status\">Loading...</span>\n-  <span class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  <span class=\"visually-hidden\">Loading...</span>\n+  <span class=\"spinner-grow spinner-grow-sm\" aria-hidden=\"true\"></span>\n+  <span class=\"visually-hidden\" role=\"status\">Loading...</span>\n-  <span class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  Loading...\n+  <span class=\"spinner-grow spinner-grow-sm\" aria-hidden=\"true\"></span>\n+  <span role=\"status\">Loading...</span>"
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 38498,
            "commit_sha": "d45cc7ef516de676bfaa2b97fe10b71e98ff6f3e",
            "commit_message": "Support `Home` and `End` keys in tabs (#38498)\n\n* Support `Home` and `End` keys in tabs\r\n\r\n* Update tab.js\r\n\r\n* simplify tests\r\n\r\n* Update navs-tabs.md\r\n\r\n* Update .bundlewatch.config.json\r\n\r\n---------\r\n\r\nCo-authored-by: Patrick H. Lauke <redux@splintered.co.uk>\r\nCo-authored-by: XhmikosR <xhmikosr@gmail.com>\r\nCo-authored-by: Mark Otto <markdotto@gmail.com>",
            "code_changes": "-      \"maxSize\": \"16.1 kB\"\n+      \"maxSize\": \"16.25 kB\"\n+const HOME_KEY = 'Home'\n+const END_KEY = 'End'\n-    if (!([ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key))) {\n+    if (!([ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key))) {\n-    const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key)\n-    const nextActiveElement = getNextActiveElement(this._getChildren().filter(element => !isDisabled(element)), event.target, isNext, true)\n+    const children = this._getChildren().filter(element => !isDisabled(element))\n+    let nextActiveElement\n+    if ([HOME_KEY, END_KEY].includes(event.key)) {\n+      nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1]\n+    } else {\n+      const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key)\n+      nextActiveElement = getNextActiveElement(children, event.target, isNext, true)\n+    }\n+    it('if keydown event is Home, handle it', () => {\n+      fixtureEl.innerHTML = [\n+        '<div class=\"nav\">',\n+        '  <span id=\"tab1\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '  <span id=\"tab2\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '  <span id=\"tab3\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '</div>'\n+      ].join('')\n+      const tabEl1 = fixtureEl.querySelector('#tab1')\n+      const tabEl3 = fixtureEl.querySelector('#tab3')\n+      const tab3 = new Tab(tabEl3)\n+      tab3.show()\n+      const spyShown = jasmine.createSpy()\n+      tabEl1.addEventListener('shown.bs.tab', spyShown)\n+      const keydown = createEvent('keydown')\n+      keydown.key = 'Home'\n+      tabEl3.dispatchEvent(keydown)\n+      expect(spyShown).toHaveBeenCalled()\n+    })\n+    it('if keydown event is End, handle it', () => {\n+      fixtureEl.innerHTML = [\n+        '<div class=\"nav\">',\n+        '  <span id=\"tab1\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '  <span id=\"tab2\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '  <span id=\"tab3\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '</div>'\n+      ].join('')\n+      const tabEl1 = fixtureEl.querySelector('#tab1')\n+      const tabEl3 = fixtureEl.querySelector('#tab3')\n+      const tab1 = new Tab(tabEl1)\n+      tab1.show()\n+      const spyShown = jasmine.createSpy()\n+      tabEl3.addEventListener('shown.bs.tab', spyShown)\n+      const keydown = createEvent('keydown')\n+      keydown.key = 'End'\n+      tabEl1.dispatchEvent(keydown)\n+      expect(spyShown).toHaveBeenCalled()\n+    })\n+    it('if keydown event is Home and first element is disabled', () => {\n+      fixtureEl.innerHTML = [\n+        '<div class=\"nav\">',\n+        '  <span id=\"tab1\" class=\"nav-link disabled\" data-bs-toggle=\"tab\" disabled></span>',\n+        '  <span id=\"tab2\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '  <span id=\"tab3\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '</div>'\n+      ].join('')\n+      const tabEl1 = fixtureEl.querySelector('#tab1')\n+      const tabEl2 = fixtureEl.querySelector('#tab2')\n+      const tabEl3 = fixtureEl.querySelector('#tab3')\n+      const tab3 = new Tab(tabEl3)\n+      tab3.show()\n+      const spyShown1 = jasmine.createSpy()\n+      const spyShown2 = jasmine.createSpy()\n+      tabEl1.addEventListener('shown.bs.tab', spyShown1)\n+      tabEl2.addEventListener('shown.bs.tab', spyShown2)\n+      const keydown = createEvent('keydown')\n+      keydown.key = 'Home'\n+      tabEl3.dispatchEvent(keydown)\n+      expect(spyShown1).not.toHaveBeenCalled()\n+      expect(spyShown2).toHaveBeenCalled()\n+    })\n+    it('if keydown event is End and last element is disabled', () => {\n+      fixtureEl.innerHTML = [\n+        '<div class=\"nav\">',\n+        '  <span id=\"tab1\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '  <span id=\"tab2\" class=\"nav-link\" data-bs-toggle=\"tab\"></span>',\n+        '  <span id=\"tab3\" class=\"nav-link\" data-bs-toggle=\"tab\" disabled></span>',\n+        '</div>'\n+      ].join('')\n+      const tabEl1 = fixtureEl.querySelector('#tab1')\n+      const tabEl2 = fixtureEl.querySelector('#tab2')\n+      const tabEl3 = fixtureEl.querySelector('#tab3')\n+      const tab1 = new Tab(tabEl1)\n+      tab1.show()\n+      const spyShown2 = jasmine.createSpy()\n+      const spyShown3 = jasmine.createSpy()\n+      tabEl2.addEventListener('shown.bs.tab', spyShown2)\n+      tabEl3.addEventListener('shown.bs.tab', spyShown3)\n+      const keydown = createEvent('keydown')\n+      keydown.key = 'End'\n+      tabEl1.dispatchEvent(keydown)\n+      expect(spyShown3).not.toHaveBeenCalled()\n+      expect(spyShown2).toHaveBeenCalled()\n+    })\n-In line with the ARIA Authoring Practices pattern, only the currently active tab receives keyboard focus. When the JavaScript plugin is initialized, it will set `tabindex=\"-1\"` on all inactive tab controls. Once the currently active tab has focus, the cursor keys activate the previous/next tab, with the plugin changing the [roving `tabindex`](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/) accordingly. However, note that the JavaScript plugin does not distinguish between horizontal and vertical tab lists when it comes to cursor key interactions: regardless of the tab list's orientation, both the up *and* left cursor go to the previous tab, and down *and* right cursor go to the next tab.\n+In line with the ARIA Authoring Practices pattern, only the currently active tab receives keyboard focus. When the JavaScript plugin is initialized, it will set `tabindex=\"-1\"` on all inactive tab controls. Once the currently active tab has focus, the cursor keys activate the previous/next tab. The <kbd>Home</kbd> and <kbd>End</kbd> keys activate the first and last tabs, respectively. The plugin will change the [roving `tabindex`](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/) accordingly. However, note that the JavaScript plugin does not distinguish between horizontal and vertical tab lists when it comes to cursor key interactions: regardless of the tab list's orientation, both the up *and* left cursor go to the previous tab, and down *and* right cursor go to the next tab."
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 38223,
            "commit_sha": "e00d06e45bf0b15c018c3313fb129d938f56cb2b",
            "commit_message": "Fix wrong generation of `aria-labelledby` in tab navigation (#38223)\n\n* fix wrong generation of aria-labelledby in tab navigation\r\n\r\n* fix wrong test\r\n\r\n---------\r\n\r\nCo-authored-by: Jan Bensch <github@bensch.dev>\r\nCo-authored-by: XhmikosR <xhmikosr@gmail.com>",
            "code_changes": "-      this._setAttributeIfNotExists(target, 'aria-labelledby', `#${child.id}`)\n+      this._setAttributeIfNotExists(target, 'aria-labelledby', `${child.id}`)\n-      expect(tabPanel.getAttribute('aria-labelledby')).toEqual('#foo')\n+      expect(tabPanel.getAttribute('aria-labelledby')).toEqual('foo')"
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 37498,
            "commit_sha": "cc25d6f10c79a066eafa54d00f6b41a81a3e04a0",
            "commit_message": "Fix accessibility of examples buttons (#37498)\n\nCo-authored-by: Patrick H. Lauke <redux@splintered.co.uk>",
            "code_changes": "-            <svg class=\"bi\" role=\"img\" aria-label=\"Try it\"><use xlink:href=\"#lightning-charge-fill\"/></svg>\n+            <svg class=\"bi\" aria-hidden=\"true\"><use xlink:href=\"#lightning-charge-fill\"/></svg>\n-            <svg class=\"bi\" role=\"img\" aria-label=\"Copy\"><use xlink:href=\"#clipboard\"/></svg>\n+            <svg class=\"bi\" aria-hidden=\"true\"><use xlink:href=\"#clipboard\"/></svg>"
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 37432,
            "commit_sha": "0446e22b5aa556701f32015e9678f4ae822d1386",
            "commit_message": "Docs: use `<button>` for dropdown/popover examples, explain preference over `<a>` for dropdowns, tweak collapse prose (#37432)\n\n* Expand dropdown explanation for use of `<a>`, use `<button>`s for modal examples\r\n\r\n* Remove redundant `role=\"button\"` from collapse test `<button>` elements\r\n\r\n* Tweak language\r\n\r\n* Tweak collapse prose",
            "code_changes": "-          '    <button data-bs-target=\"#parentContent\" data-bs-toggle=\"collapse\" role=\"button\" class=\"accordion-toggle\">Parent</button>',\n+          '    <button data-bs-target=\"#parentContent\" data-bs-toggle=\"collapse\" class=\"accordion-toggle\">Parent</button>',\n-          '            <button data-bs-target=\"#childContent1\" data-bs-toggle=\"collapse\" role=\"button\" class=\"accordion-toggle\">Child 1</button>',\n+          '            <button data-bs-target=\"#childContent1\" data-bs-toggle=\"collapse\" class=\"accordion-toggle\">Child 1</button>',\n-          '            <button data-bs-target=\"#childContent2\" data-bs-toggle=\"collapse\" role=\"button\" class=\"accordion-toggle\">Child 2</button>',\n+          '            <button data-bs-target=\"#childContent2\" data-bs-toggle=\"collapse\" class=\"accordion-toggle\">Child 2</button>',\n-Generally, we recommend using a button with the `data-bs-target` attribute. While not recommended from a semantic point of view, you can also use a link with the `href` attribute (and a `role=\"button\"`). In both cases, the `data-bs-toggle=\"collapse\"` is required.\n+Generally, we recommend using a `<button>` with the `data-bs-target` attribute. While not recommended from a semantic point of view, you can also use an `<a>` link with the `href` attribute (and a `role=\"button\"`). In both cases, the `data-bs-toggle=\"collapse\"` is required.\n-The collapse plugin also supports horizontal collapsing. Add the `.collapse-horizontal` modifier class to transition the `width` instead of `height` and set a `width` on the immediate child element. Feel free to write your own custom Sass, use inline styles, or use our [width utilities]({{< docsref \"/utilities/sizing\" >}}).\n+The collapse plugin supports horizontal collapsing. Add the `.collapse-horizontal` modifier class to transition the `width` instead of `height` and set a `width` on the immediate child element. Feel free to write your own custom Sass, use inline styles, or use our [width utilities]({{< docsref \"/utilities/sizing\" >}}).\n-## Multiple targets\n+## Multiple toggles and targets\n-A `<button>` or `<a>` can show and hide multiple elements by referencing them with a selector in its `href` or `data-bs-target` attribute.\n-Multiple `<button>` or `<a>` can show and hide an element if they each reference it with their `href` or `data-bs-target` attribute\n+A `<button>` or `<a>` element can show and hide multiple elements by referencing them with a selector in its `data-bs-target` or `href` attribute.\n+Conversely, multiple `<button>` or `<a>` elements can show and hide the same element if they each reference it with their `data-bs-target` or `href` attribute.\n-Wrap the dropdown's toggle (your button or link) and the dropdown menu within `.dropdown`, or another element that declares `position: relative;`. Dropdowns can be triggered from `<a>` or `<button>` elements to better fit your potential needs. The examples shown here use semantic `<ul>` elements where appropriate, but custom markup is supported.\n+Wrap the dropdown's toggle (your button or link) and the dropdown menu within `.dropdown`, or another element that declares `position: relative;`. Ideally, you should use a `<button>` element as the dropdown trigger, but the plugin will work with `<a>` elements as well. The examples shown here use semantic `<ul>` elements where appropriate, but custom markup is supported.\n-Any single `.btn` can be turned into a dropdown toggle with some markup changes. Here's how you can put them to work with either `<button>` elements:\n+Any single `.btn` can be turned into a dropdown toggle with some markup changes. Here's how you can put them to work with `<button>` elements:\n-And with `<a>` elements:\n+While `<button>` is the recommended control for a dropdown toggle, there might be situations where you have to use an `<a>` element. If you do, we recommend adding a `role=\"button\"` attribute to appropriately convey control's purpose to assistive technologies such as screen readers.\n-          <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n+          <button class=\"btn btn-dark dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n-          </a>\n+          </button>\n-        <p>This <a href=\"#\" role=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"popover\" title=\"Popover title\" data-bs-content=\"Popover body content is set in this attribute.\" data-bs-container=\"#exampleModalPopovers\">button</a> triggers a popover on click.</p>\n+        <p>This <button class=\"btn btn-secondary\" data-bs-toggle=\"popover\" title=\"Popover title\" data-bs-content=\"Popover body content is set in this attribute.\" data-bs-container=\"#exampleModalPopovers\">button</button> triggers a popover on click.</p>\n-  <p>This <a href=\"#\" role=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"popover\" title=\"Popover title\" data-bs-content=\"Popover body content is set in this attribute.\">button</a> triggers a popover on click.</p>\n+  <p>This <button class=\"btn btn-secondary\" data-bs-toggle=\"popover\" title=\"Popover title\" data-bs-content=\"Popover body content is set in this attribute.\">button</button> triggers a popover on click.</p>\n-<a class=\"btn btn-primary\" data-bs-toggle=\"modal\" href=\"#exampleModalToggle\" role=\"button\">Open first modal</a>\n+<button class=\"btn btn-primary\" data-bs-target=\"#exampleModalToggle\" data-bs-toggle=\"modal\">Open first modal</button>"
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 37200,
            "commit_sha": "d49d8ce583f6f12552f122122a99063738656cd9",
            "commit_message": "Ensure Tab keyboard functionality after #37146 (#37200)\n\n* fix: keyboard functionality\r\n\r\n* test: add tests\r\n\r\n* Add some focus spies in 2 other unit tests\r\n\r\nCo-authored-by: Julien D\u00e9ramond <juderamond@gmail.com>",
            "code_changes": "+      nextActiveElement.focus({ preventScroll: true })\n+      const spyFocus1 = spyOn(tabEl1, 'focus').and.callThrough()\n+      const spyFocus2 = spyOn(tabEl2, 'focus').and.callThrough()\n+      const spyFocus3 = spyOn(tabEl3, 'focus').and.callThrough()\n+      expect(spyFocus2).toHaveBeenCalled()\n+      expect(spyFocus3).toHaveBeenCalled()\n+      expect(spyFocus1).toHaveBeenCalled()\n-      const tabEl = fixtureEl.querySelector('#tab1')\n+      const tabEl1 = fixtureEl.querySelector('#tab1')\n-      const tab = new Tab(tabEl)\n+      const tab1 = new Tab(tabEl1)\n-      const spyShow1 = spyOn(tab, 'show').and.callThrough()\n+      const spyShow1 = spyOn(tab1, 'show').and.callThrough()\n+      const spyFocus1 = spyOn(tabEl1, 'focus').and.callThrough()\n+      const spyFocus2 = spyOn(tabEl2, 'focus').and.callThrough()\n+      expect(spyFocus1).toHaveBeenCalled()\n-      tabEl.dispatchEvent(keydown)\n+      tabEl1.dispatchEvent(keydown)\n+      expect(spyFocus2).toHaveBeenCalled()\n+      const spyFocus1 = spyOn(tabEl, 'focus').and.callThrough()\n+      const spyFocus2 = spyOn(tabEl2, 'focus').and.callThrough()\n+      const spyFocus3 = spyOn(tabEl3, 'focus').and.callThrough()\n+      const spyFocus4 = spyOn(tabEl4, 'focus').and.callThrough()\n+      expect(spyFocus1).not.toHaveBeenCalled()\n+      expect(spyFocus2).not.toHaveBeenCalled()\n+      expect(spyFocus3).not.toHaveBeenCalled()\n+      expect(spyFocus4).toHaveBeenCalledTimes(1)\n+      const spyFocus1 = spyOn(tabEl, 'focus').and.callThrough()\n+      const spyFocus2 = spyOn(tabEl2, 'focus').and.callThrough()\n+      const spyFocus3 = spyOn(tabEl3, 'focus').and.callThrough()\n+      const spyFocus4 = spyOn(tabEl4, 'focus').and.callThrough()\n+      expect(spyFocus4).not.toHaveBeenCalled()\n+      expect(spyFocus3).not.toHaveBeenCalled()\n+      expect(spyFocus2).not.toHaveBeenCalled()\n+      expect(spyFocus1).toHaveBeenCalledTimes(1)"
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 37026,
            "commit_sha": "32c457db4b6ff389efbd35772b24746c7ffb0b6d",
            "commit_message": "Rework button focus/active styling, with extra changes for checks/radios (#37026)\n\n* Replace :focus styles with :focus-visible\r\n\r\n* Remove :active / .active styles\r\n\r\n* Don't apply :hover styles for `.btn` that follows a `.btn-check`\r\n\r\nThis removes a large part of the visual confusion of button checks/radios - that you currently have to move your mouse away from them to see what they actually changed to (checked or unchecked)\r\n\r\n* Reintroduce :active, but *not* for button checks/radios\r\n\r\n* Sort focus styling specifically for button checks/radios\r\n\r\ndon't change background on focus, just give it the border/outline. again, avoids confusion whether something is checked or not while focused\r\n\r\n* Re-add `outline:0` which was lost when resolving last merge conflict\r\n\r\nCo-authored-by: Mark Otto <markd.otto@gmail.com>",
            "code_changes": "-  &:hover {\n+  :not(.btn-check) + &:hover,\n+  &:first-child:hover {\n-  .btn-check:focus + &,\n-  &:focus {\n+  &:focus-visible {\n+    outline: 0;\n-  .btn-check:focus:not(:focus-visible) + &,\n-  &:focus:not(:focus-visible) {\n+  .btn-check:focus-visible + & {\n+    border-color: var(--#{$prefix}btn-hover-border-color);\n+    // Avoid using mixin so we can pass custom focus shadow properly\n+    @if $enable-shadows {\n+      box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);\n+    } @else {\n+      box-shadow: var(--#{$prefix}btn-focus-box-shadow);\n+    }\n-  .btn-check:active + &,\n-  &:active,\n+  :not(.btn-check) + &:active,\n+  &:first-child:active,\n-    &:focus {\n+    &:focus-visible {\n-  &:focus {\n+  &:focus-visible {\n-  &:focus {\n+  &:focus-visible {"
        },
        {
            "project_name": "twbs/bootstrap",
            "issue_number": 36696,
            "commit_sha": "6f10bdc99caff85ddd1a13f231dd9d98e5fdd2eb",
            "commit_message": "add `type=\"button\"` to Bootstrap versions dropdown (#36696)\n\nminor accessibility issue fix reported by webhint.io browser extension",
            "code_changes": "-  <button class=\"btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" data-bs-display=\"static\">\n+  <button type=\"button\" class=\"btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" data-bs-display=\"static\">"
        }